<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on Home page of Debamitro Chakraborti</title>
    <link>https://debamitro.github.io/tags/rust/</link>
    <description>Recent content in Rust on Home page of Debamitro Chakraborti</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 May 2025 11:05:34 -0400</lastBuildDate>
    <atom:link href="https://debamitro.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Attempting to Vibe Code in Rust</title>
      <link>https://debamitro.github.io/blog/attempting-to-vibe-code-rust/</link>
      <pubDate>Fri, 09 May 2025 11:05:34 -0400</pubDate>
      <guid>https://debamitro.github.io/blog/attempting-to-vibe-code-rust/</guid>
      <description>&lt;p&gt;It all started with a post on X I made, more than a month ago&lt;/p&gt;&#xA;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;is anybody doing vibe coding in rust?&lt;/p&gt;&amp;mdash; DebamitroChakraborti (@debamitro) &lt;a href=&#34;https://twitter.com/debamitro/status/1905308219477545266?ref_src=twsrc%5Etfw&#34;&gt;March 27, 2025&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&#xA;&lt;p&gt;Based on the responses, I knew I had to try it out. So I started looking for a project to do.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-project&#34;&gt;The project&lt;/h2&gt;&#xA;&lt;p&gt;A few months ago, I had vibe coded a tiny &lt;a href=&#34;https://github.com/debamitro/gmail-size-classifier&#34;&gt;python project which classified Gmail messages by size&lt;/a&gt;.&#xA;I decided to create a Rust version of it. I thought if I succeeded, it would be easier to distribute as a desktop application.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Mystery of the Missing Audio Samples - II</title>
      <link>https://debamitro.github.io/blog/mystery-of-missing-audio-samples-ii/</link>
      <pubDate>Tue, 11 Jan 2022 11:00:51 -0500</pubDate>
      <guid>https://debamitro.github.io/blog/mystery-of-missing-audio-samples-ii/</guid>
      <description>&lt;p&gt;(This is a continuation from my previous &lt;a href=&#34;https://debamitro.github.io/blog/mystery-of-missing-audio-samples-i/&#34;&gt;blog post&lt;/a&gt;.)&lt;/p&gt;&#xA;&lt;h2 id=&#34;re-cap&#34;&gt;Re-cap&lt;/h2&gt;&#xA;&lt;p&gt;I was trying to read in audio samples from my microphone using Rust&amp;rsquo;s &lt;a href=&#34;https://github.com/rustaudio/cpal&#34;&gt;cpal&lt;/a&gt; library. Somehow I couldn&amp;rsquo;t get 44100 samples per second even though I had verified that the sampling rate was 44100 Hz. I tried various things and nothing seemed to work.&lt;/p&gt;&#xA;&lt;h2 id=&#34;more-attempts-to-solve-the-mystery&#34;&gt;More attempts to solve the mystery&lt;/h2&gt;&#xA;&lt;h3 id=&#34;attempt-4&#34;&gt;Attempt 4&lt;/h3&gt;&#xA;&lt;p&gt;Cpal uses &lt;a href=&#34;https://crates.io/crates/coreaudio-rs&#34;&gt;coreaudio-rs&lt;/a&gt; on OSX, which is a &amp;ldquo;Rust-esque&amp;rdquo; interface over Apple&amp;rsquo;s CoreAudio framework. From my comparisons of portaudio and cpal, I picked one difference which seemed important to me. When portaudio wants to &amp;lsquo;stop&amp;rsquo; an input stream, it calls a bunch of stuff including &lt;a href=&#34;https://developer.apple.com/documentation/audiotoolbox/1439607-audiounitreset&#34;&gt;AudioUnitReset&lt;/a&gt; - and cpal was &lt;em&gt;not&lt;/em&gt; doing this one particular call. What&amp;rsquo;s more, coreaudio-rs doesn&amp;rsquo;t even have a way to call the AudioUnitReset routine. I downloaded and built my own copies of cpal and coreaudio-rs and made the necessary changes. This taught me how to modify Cargo.toml to tweak where a dependent package got picked up from - the crate registry, a git repo, or a local directory. I didn&amp;rsquo;t get the desired result yet - I was still receiving somewhere between 40000 and 43000 samples per second.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Mystery of the Missing Audio Samples - I</title>
      <link>https://debamitro.github.io/blog/mystery-of-missing-audio-samples-i/</link>
      <pubDate>Thu, 06 Jan 2022 10:00:00 -0500</pubDate>
      <guid>https://debamitro.github.io/blog/mystery-of-missing-audio-samples-i/</guid>
      <description>&lt;p&gt;It all started in the third week of my batch at the Recurse Center, when I got interested in Audio Signal Processing, and signed up for a &lt;a href=&#34;https://www.coursera.org/learn/audio-signal-processing&#34;&gt;Coursera course&lt;/a&gt; which some people were doing. My biggest goal for the batch was to get better at using Rust. So, I thought I should do the assignments in the course using Rust. Looking for a basic audio library, I found &lt;a href=&#34;https://github.com/rustaudio/cpal&#34;&gt;cpal&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;playing-with-cpal&#34;&gt;Playing with cpal&lt;/h2&gt;&#xA;&lt;p&gt;A couple of years ago I had played briefly with &lt;a href=&#34;https://github.com/PortAudio/portaudio&#34;&gt;portaudio&lt;/a&gt;, which is a very widely-used C library for audio applications. Cpal seemed better-designed, and used Rust idioms. The documentation was good. I kept referring to the &lt;a href=&#34;https://github.com/RustAudio/cpal/blob/master/examples/record_wav.rs&#34;&gt;record_wav.rs&lt;/a&gt; example and started writing some code which could read audio data from my microphone. I had to learn some concepts like what &lt;a href=&#34;https://doc.rust-lang.org/stable/std/ops/trait.FnMut.html&#34;&gt;FnMut&lt;/a&gt; meant, and whether I could use a function where the example used a closure. The most important lines in the first working version looked like&lt;/p&gt;</description>
    </item>
    <item>
      <title>(Almost) 6 weeks of Rust</title>
      <link>https://debamitro.github.io/blog/almost-6-weeks-of-rust/</link>
      <pubDate>Fri, 10 Dec 2021 14:57:27 -0500</pubDate>
      <guid>https://debamitro.github.io/blog/almost-6-weeks-of-rust/</guid>
      <description>&lt;p&gt;I spent most of my working hours in the last six weeks learning about and using the &lt;a href=&#34;https://www.rust-lang.org&#34;&gt;Rust programming language&lt;/a&gt;. Here is an account of that. No, I am still nothing more than a beginner in Rust.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-opportunity&#34;&gt;The opportunity&lt;/h2&gt;&#xA;&lt;p&gt;I could spend this time in this fashion by being in a remote batch at the &lt;a href=&#34;https://www.recurse.com&#34;&gt;Recurse Center&lt;/a&gt; (also known as RC). I learnt a lot by myself, but only because I had the opportunity to chat and pair with other programmers. As I have proably written before, RC is a great ecosystem for learning anything related to programming.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programmatic Access of C Structures</title>
      <link>https://debamitro.github.io/blog/programmatic-access-of-c-structures/</link>
      <pubDate>Fri, 19 Nov 2021 15:26:42 -0500</pubDate>
      <guid>https://debamitro.github.io/blog/programmatic-access-of-c-structures/</guid>
      <description>&lt;h1 id=&#34;background&#34;&gt;Background&lt;/h1&gt;&#xA;&lt;p&gt;More than a year ago, I was looking for a project which would help me learn the &lt;a href=&#34;https://www.rust-lang.org&#34;&gt;Rust programming language&lt;/a&gt;. I like creating small projects from scratch, so I thought of solving a problem I had encountered occasionally at work. C (and C++ as well) doesn&amp;rsquo;t have a standard way of accessing its data structures programmatically. Some languages have type introspection capabilities, and C/C++ obviously don&amp;rsquo;t have that either. As a result, we often need to implement boilerplate utility code for dealing with C/C++ structures. Some examples are:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Impressions of Rust 2020 - part I</title>
      <link>https://debamitro.github.io/blog/impressions-of-rust-2020-parti/</link>
      <pubDate>Sat, 26 Jun 2021 14:00:56 -0400</pubDate>
      <guid>https://debamitro.github.io/blog/impressions-of-rust-2020-parti/</guid>
      <description>&lt;p&gt;Learning a new programming language is always a nice way to kick your brain into action. I first experienced this when I tried to learn Lisp by watching some video lectures. It took me months to digest the concepts and I never got around to writing any lisp. But the ideas stayed with me for years. Later on &lt;a href=&#34;https://debamitro.github.io/blog/how-i-got-into-clojure&#34;&gt;I did learn Clojure&lt;/a&gt; and spend some months writing a bit of Clojure and ClojureScript. All this while I had been hearing about Rust and silently ignoring it.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
